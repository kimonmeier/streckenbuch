@using Google.Protobuf.Collections
@using System.Text
@inject SignaleService.SignaleServiceClient SignaleService
@inject BetriebspunkteService.BetriebspunkteServiceClient BetriebspunkteService
@inject IDialogService dialogService

@if (_isLoading)
{
    <MudProgressCircular Indeterminate="true"></MudProgressCircular>
}
else
{
    <MudItem>
        <MudTabs>
            @foreach (var strecke in Strecken.OrderBy(x => (DateOnly?)x.VonDatum ?? DateOnly.MinValue))
            {
                <MudTabPanel Text="@GetTabText(strecke)">
                    <MudExpansionPanels MultiExpansion="true">
                        @foreach (var betriebspunkt in Betriebspunkte)
                        {
                            var betriebspunktSignal = strecke.Betriebspunkte.SingleOrDefault(x => x.BetriebspunktId.Equals(betriebspunkt.Id));
                            <MudExpansionPanel Text="@betriebspunkt.Name"
                                               ExpandedChanged="@((newValue) => Callback(newValue, betriebspunkt.Id, betriebspunktSignal))">
                                @if (SignaleLoading[betriebspunkt.Id])
                                {
                                    <MudProgressCircular Indeterminate="true"></MudProgressCircular>
                                }
                                else
                                {
                                    <div class="flex flex-row h-full">
                                        <div class="w-1/2 border p-2 rounded-lg h-full">
                                            <SortableList Class="w-full h-full"
                                                          Id="@GetId(betriebspunkt.Id, 1)"
                                                          ForceFallback="false"
                                                          Items="ZugewieseneSignale[betriebspunkt.Id]"
                                                          Group="@betriebspunkt.Id.ToString()"
                                                          Context="item"
                                                          OnRemove="@((tuple) => RemoveZugeordnetesSignal(betriebspunkt.Id, tuple))"
                                                          OnUpdate="@((tuple) => UpdateZugeordnetesSignal(betriebspunkt.Id, tuple))">
                                                <SortableItemTemplate>
                                                    <div class="has-border has-background-white has-cursor-pointer">
                                                        <p class="is-size-4 p-2 ml-4">@GetSignalName(betriebspunkt.Id, item.SignalId)</p>
                                                    </div>
                                                </SortableItemTemplate>
                                            </SortableList>
                                        </div>

                                        <div class="w-1/2 border p-2 rounded-lg h-full">
                                            <SortableList Class="w-full h-full"
                                                          Id="@GetId(betriebspunkt.Id, 2)"
                                                          ForceFallback="false"
                                                          Items="OffeneSignale[betriebspunkt.Id]"
                                                          Group="@betriebspunkt.Id.ToString()"
                                                          Context="item"
                                                          OnRemove="@((tuple) => RemoveOffenesSignal(betriebspunkt.Id, tuple))"
                                                          OnUpdate="@((tuple) => UpdateOffenesSignal(betriebspunkt.Id, tuple))">
                                                <SortableItemTemplate>
                                                    <div class="has-border has-background-white has-cursor-pointer">
                                                        <p class="is-size-4 p-2 ml-4">@GetSignalName(betriebspunkt.Id, item.SignalId)</p>
                                                    </div>
                                                </SortableItemTemplate>
                                            </SortableList>
                                        </div>
                                    </div>
                                }
                            </MudExpansionPanel>
                        }
                    </MudExpansionPanels>
                </MudTabPanel>
            }
            <MudButtonGroup>
                <MudButton OnClick="Submit" Color="Color.Primary">Speichern</MudButton>
                <MudButton OnClick="Cancel" Color="Color.Secondary">Schliessen</MudButton>
                <MudButton OnClick="CreateDateRange" Color="Color.Tertiary">Datum erstellen</MudButton>
            </MudButtonGroup>
        </MudTabs>
    </MudItem>
}

@code {

    private record Entry
    {
        public Guid SignalId { get; set; }

        public int Indices { get; set; }
    }

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = null!;
    
    [Parameter]
    public Guid StreckenKonfigurationId { get; set; }

    private bool _isLoading = false;

    private List<SignalSortingStrecke> Strecken { get; set; }= new();

    private List<BetriebspunktProto> Betriebspunkte { get; set; } = new();

    private Dictionary<Guid, List<SignalProto>> Signale { get; set; } = new();

    private Dictionary<Guid, List<Entry>> ZugewieseneSignale { get; set; } = new();
    
    private Dictionary<Guid, bool> SignaleLoading { get; set; } = new();

    private Dictionary<Guid, bool> SignaleLoadedOnce { get; set; } = new();

    private Dictionary<Guid, List<Entry>> OffeneSignale { get; set; }= new();

    protected async override Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        _isLoading = true;

        Betriebspunkte = (await BetriebspunkteService.ListBetriebspunkteByStreckenKonfigurationAsync(new ListBetriebspunkteByStreckenKonfigurationRequest() { StreckenKonfigurationId = StreckenKonfigurationId})).Betriebspunkte.ToList();
        Signale = new Dictionary<Guid, List<SignalProto>>();
        SignaleLoading = new Dictionary<Guid, bool>();
        ZugewieseneSignale = new Dictionary<Guid, List<Entry>>();
        SignaleLoadedOnce = new Dictionary<Guid, bool>();
        OffeneSignale = new Dictionary<Guid, List<Entry>>();

        foreach (var betriebspunkt in Betriebspunkte)
        {
            SignaleLoading.Add(betriebspunkt.Id, false);
            SignaleLoadedOnce.Add(betriebspunkt.Id, false);
            Signale.Add(betriebspunkt.Id, new List<SignalProto>());
            ZugewieseneSignale.Add(betriebspunkt.Id, new List<Entry>());
            OffeneSignale.Add(betriebspunkt.Id, new List<Entry>());
        }

        var answer = await SignaleService.ListSignalSortingAsync(new ListSignalSortingRequest()
        {
            StreckeKonfigurationId = StreckenKonfigurationId
        });

        Strecken = answer.Strecken.ToList();
        _isLoading = false;
    }

    private string GetTabText(SignalSortingStrecke strecke)
    {
        StringBuilder builder = new StringBuilder();

        builder.Append(((DateOnly)strecke.VonDatum!).ToShortDateString());
        builder.Append(" - ");

        if ((DateOnly?)strecke.BisDatum is not null)
        {
            builder.Append(((DateOnly)strecke.BisDatum!).ToShortDateString());
        }

        return builder.ToString();
    }

    private string GetSignalName(Guid betriebspunktId, Guid signalId)
    {
        return Signale[betriebspunktId].Single(x => x.SignalId == signalId).Name;
    }

    private string GetId(Guid id, int liste)
    {
        return "sortable" + id + liste;
    }

    private void RemoveZugeordnetesSignal(Guid betriebspunktId, (int oldIndices, int newIndices) indices)
    {
        var entry = ZugewieseneSignale[betriebspunktId].Single(x => x.Indices == indices.oldIndices);
        ZugewieseneSignale[betriebspunktId].Remove(entry);

        for (int i = 0; i < ZugewieseneSignale[betriebspunktId].Count; i++)
        {
            ZugewieseneSignale[betriebspunktId][i].Indices = i;
        }

        entry.Indices = indices.newIndices;
        OffeneSignale[betriebspunktId].Insert(indices.newIndices, entry);

        for (int i = 0; i < OffeneSignale[betriebspunktId].Count; i++)
        {
            OffeneSignale[betriebspunktId][i].Indices = i;
        }
    }

    private void RemoveOffenesSignal(Guid betriebspunktId, (int oldIndices, int newIndices) indices)
    {
        var entry = OffeneSignale[betriebspunktId].Single(x => x.Indices == indices.oldIndices);
        OffeneSignale[betriebspunktId].Remove(entry);

        for (int i = 0; i < OffeneSignale[betriebspunktId].Count; i++)
        {
            OffeneSignale[betriebspunktId][i].Indices = i;
        }

        entry.Indices = indices.newIndices;
        ZugewieseneSignale[betriebspunktId].Insert(indices.newIndices, entry);

        for (int i = 0; i < ZugewieseneSignale[betriebspunktId].Count; i++)
        {
            ZugewieseneSignale[betriebspunktId][i].Indices = i;
        }
    }

    private void UpdateZugeordnetesSignal(Guid betriebspunktId, (int oldIndices, int newIndices) indices)
    {
        var entry = ZugewieseneSignale[betriebspunktId].Single(x => x.Indices == indices.oldIndices);
        ZugewieseneSignale[betriebspunktId].Remove(entry);
        entry.Indices = indices.newIndices;
        ZugewieseneSignale[betriebspunktId].Insert(indices.newIndices, entry);

        for (int i = 0; i < ZugewieseneSignale[betriebspunktId].Count; i++)
        {
            ZugewieseneSignale[betriebspunktId][i].Indices = i;
        }
    }

    private void UpdateOffenesSignal(Guid betriebspunktId, (int oldIndices, int newIndices) indices)
    {
        var entry = OffeneSignale[betriebspunktId].Single(x => x.Indices == indices.oldIndices);
        OffeneSignale[betriebspunktId].Remove(entry);
        entry.Indices = indices.newIndices;
        OffeneSignale[betriebspunktId].Insert(indices.newIndices, entry);

        for (int i = 0; i < OffeneSignale[betriebspunktId].Count; i++)
        {
            OffeneSignale[betriebspunktId][i].Indices = i;
        }
    }

    private void Callback(bool newValue, Guid betriebspunktId, SignalSortingBetriebspunkt? sortingBetriebspunkt)
    {
        if (!newValue)
        {
            return;
        }

        SignaleLoading[betriebspunktId] = true;
        SignaleLoadedOnce[betriebspunktId] = true;

        SignaleService.ListSignaleByBetriebspunktAndStreckenkonfigurationAsync(new ListSignaleByBetriebspunktAndStreckenkonfigurationRequest()
            {
                BetriebspunktId = betriebspunktId,
                StreckenKonfigurationId = StreckenKonfigurationId
            })
            .ResponseAsync
            .ContinueWith(signalAnswer =>
            {
                var signalProtos = signalAnswer.Result.Signale.ToList();

                Signale[betriebspunktId] = signalProtos;
                ZugewieseneSignale[betriebspunktId].Clear();
                OffeneSignale[betriebspunktId].Clear();

                foreach (var signalSorting in (sortingBetriebspunkt?.Signale.OrderBy(x => x.SortingNumber).ToList()) ?? new List<SignalSortingSignal>())
                {
                    var signal = signalProtos.Single(x => ((Guid)x.SignalId).Equals(signalSorting.SignalId));

                    ZugewieseneSignale[betriebspunktId].Add(new Entry()
                    {
                        SignalId = signal.SignalId, Indices = signalSorting.SortingNumber
                    });
                }

                int index = 0;
                foreach (SignalProto signalProto in signalProtos.Where(x => ZugewieseneSignale[betriebspunktId].All(z => z.SignalId != x.SignalId)))
                {
                    OffeneSignale[betriebspunktId].Add(new Entry()
                    {
                        SignalId = signalProto.SignalId, Indices = index
                    });
                    index++;
                }
                
                SignaleLoading[betriebspunktId] = false;
            })
            .ContinueWith(x => InvokeAsync(StateHasChanged))
            .ConfigureAwait(false);

    }

    private async Task CreateDateRange(MouseEventArgs obj)
    {
        var parameters = new DialogParameters<CreateSignalSorting>
        {
            {
                x => x.StreckenkonfigurationId, StreckenKonfigurationId
            },
        };

        await dialogService.Show<CreateSignalSorting>("Erstellen", parameters).Result;
        
        
        await LoadData();
    }

    private async Task Submit()
    {
        foreach (KeyValuePair<Guid, List<Entry>> betriebspunktSignalPair in ZugewieseneSignale)
        {
            foreach (var sortingStrecke in Strecken)
            {
                var betriebspunktSignal = sortingStrecke.Betriebspunkte.SingleOrDefault(x => x.BetriebspunktId == betriebspunktSignalPair.Key);
                if (betriebspunktSignal is null)
                {
                    betriebspunktSignal = new SignalSortingBetriebspunkt()
                    {
                        BetriebspunktId = betriebspunktSignalPair.Key
                    };
                    
                    sortingStrecke.Betriebspunkte.Add(betriebspunktSignal);
                }

                if (!SignaleLoadedOnce[betriebspunktSignalPair.Key])
                {
                    // Panel was never opened so no signals were every loaded. If the request was getting through every signal would be deleted!
                    continue;
                }
                betriebspunktSignal.Signale.Clear();

                foreach (Entry signalEntry in betriebspunktSignalPair.Value)
                {
                    betriebspunktSignal.Signale.Add(new SignalSortingSignal()
                    {
                        SignalId = signalEntry.SignalId,
                        SortingNumber = signalEntry.Indices
                    });
                }
            }
        }


        foreach (SignalSortingStrecke sortingStrecke in Strecken)
        {
            await SignaleService.ChangeSignalSortingAsync(new ChangeSignalSortingRequest()
            {
                Strecke = sortingStrecke
            });
        }
        
        MudDialog.Close();
    }

    private void Cancel()
    {
        MudDialog.Close();
    }

}