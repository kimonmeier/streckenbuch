@using Google.Protobuf.Collections
@using Streckenbuch.Client.Components.Fahren
@using System.Text
@inject StreckenService.StreckenServiceClient streckenService
@inject LinienService.LinienServiceClient linienService
@inject FahrenService.FahrenServiceClient fahrenService
@inject IMapper mapper

<MudItem>
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.caption">Fahrordnung laden</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudTabs @bind-ActivePanelIndex="currentActiveIndex">
                <MudTabPanel Text="Linie">
                    <MudSelect T="LinienProto" @bind-Value="selectedLinie" Label="Linie">
                        @foreach (var item in linien)
                        {
                            <MudSelectItem Value="item">
                                @item.Typ - @item.Nummer von @item.VonBetriebspunktId bis @item.BisBetriebspunktId
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudTabPanel>
                <MudTabPanel Text="Strecken">
                    @foreach (var entry in fahrenStreckenEntries)
                    {
                        <FahrenStreckenEntry Strecken="strecken" Model="entry"/>
                        @if (!string.IsNullOrEmpty(entry.ErrorMessage))
                        {
                            <MudAlert Severity="Severity.Error">@entry.ErrorMessage</MudAlert>
                        }
                    }
                    <MudButton OnClick="AddEntry">
                        <MudText Typo="Typo.subtitle1" Color="Color.Primary">+ Eintrag hinzufügen</MudText>
                    </MudButton>
                </MudTabPanel>
            </MudTabs>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error">Folgende Fehler sind aufgetreten: @errorMessage</MudAlert>
            }
        </MudCardContent>
        <MudCardActions>
            <MudButton OnClick="Submit" Color="Color.Primary">Laden</MudButton>
            <MudButton OnClick="Cancel" Color="Color.Secondary">Schliessen</MudButton>
        </MudCardActions>
    </MudCard>
</MudItem>


@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = null!;

    private List<StreckenProto> strecken = new List<StreckenProto>();
    private List<LinienProto> linien = new List<LinienProto>(); 
    private List<FahrenStreckenEntryModel> fahrenStreckenEntries = new List<FahrenStreckenEntryModel>();
    private int currentActiveIndex = 0;
    private LinienProto? selectedLinie;
    
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        strecken = (await streckenService.ListAllStreckenAsync(new Empty())).Strecken.ToList();
        linien = (await linienService.GetAllLinienAsync(new Empty())).Linien.ToList();
    }

    private void AddEntry()
    {
        fahrenStreckenEntries.Add(new FahrenStreckenEntryModel());
    }

    private async Task Submit()
    {
        if (!Validate())
        {
            return;
        }

        List<IBaseEntry> entries;
        if (currentActiveIndex == 0)
        {
            entries = await RequestEntriesByLinie();
        }
        else
        {
            entries = await RequestEntriesByStrecken();
        }

        entries.Reverse();

        MudDialog.Close(entries);
    }

    private async Task<List<IBaseEntry>> RequestEntriesByLinie()
    {
        List<FahrenRequestStrecke> requestStrecken = new List<FahrenRequestStrecke>();

        var response = await fahrenService.FahrenByLinieAsync(new FahrenRequestByLinie()
        {
            LinieId = selectedLinie!.Id
        });
        return mapper.Map<List<IBaseEntry>>(response.Entries);
    }
    
    private async Task<List<IBaseEntry>> RequestEntriesByStrecken()
    {
        List<FahrenRequestStrecke> requestStrecken = new List<FahrenRequestStrecke>();

        foreach (var entry in fahrenStreckenEntries)
        {
            requestStrecken.Add(new FahrenRequestStrecke()
            {
                StreckenKonfigurationId = entry.SelectedKonfiguration!.Id,
                VonBetriebspunktId = entry.VonBetriebspunkt!.Id,
                BisBetriebspunktId = entry.BisBetriebspunkt!.Id,
            });
        }


        FahrenRequestByStrecken requestByStrecken = new FahrenRequestByStrecken()
        {
            VonBetriebspunkt = fahrenStreckenEntries.First().VonBetriebspunkt!.Id,
            BisBetriebspunktId = fahrenStreckenEntries.Last().VonBetriebspunkt!.Id,
        };
        requestByStrecken.Strecken.Add(requestStrecken);

        var response = await fahrenService.FahrenByStreckenAsync(requestByStrecken);
        return mapper.Map<List<IBaseEntry>>(response.Entries);
    }

    private bool Validate()
    {
        StringBuilder builder = new();
        if (currentActiveIndex == 0)
        {
            validateLinie(builder);
        }
        else
        {
            validateStrecken(builder);
        }

        errorMessage = builder.ToString();

        return string.IsNullOrEmpty(errorMessage);
    }

    private void validateStrecken(StringBuilder builder)
    {
        if (!fahrenStreckenEntries.Any())
        {
            builder.AppendLine("Es wurde keine Strecken hinzugefügt");
            return;
        }

        if (fahrenStreckenEntries.Any(x => !string.IsNullOrEmpty(x.ErrorMessage)))
        {
            builder.AppendLine("Es gibt Fehler!");
            return;
        }

        int currentIndex = 0;
        while (currentIndex + 1 < fahrenStreckenEntries.Count)
        {
            var currentEntry = fahrenStreckenEntries.ElementAt(currentIndex);
            var newEntry = fahrenStreckenEntries.ElementAt(currentIndex + 1);

            if (!((Guid)currentEntry.BisBetriebspunkt!.Id).Equals(newEntry.VonBetriebspunkt!.Id))
            {
                builder.AppendLine(string.Format("Nach der Strecke {0} stimmt der Übergang nicht, {1} ist nicht {2}", currentEntry.SelectedStrecke?.Nummer, currentEntry.BisBetriebspunkt.Name, newEntry.VonBetriebspunkt.Name));
            }

            currentIndex++;
        }
    }

    private void validateLinie(StringBuilder builder)
    {
        if (selectedLinie is not null)
        {
            return;
        }

        builder.AppendLine("Es wurde keine Linie ausgewählt!");
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}
