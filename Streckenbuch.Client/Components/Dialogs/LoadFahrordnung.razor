@using Google.Protobuf.Collections
@using Streckenbuch.Client.Components.Fahren
@using Streckenbuch.Shared.Types
@using System.Text
@inject StreckenService.StreckenServiceClient StreckenService
@inject LinienService.LinienServiceClient LinienService
@inject BetriebspunkteService.BetriebspunkteServiceClient BetriebspunkteService
@inject FahrenService.FahrenServiceClient FahrenService
@inject IMapper Mapper
@inject IDialogService DialogService

<MudItem>
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.caption">Fahrordnung laden</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudTabs @bind-ActivePanelIndex="_currentActiveIndex">
                <MudTabPanel Text="Zugnummer">
                    <MudTextField InputMode="InputMode.numeric" MaxLength="5" Placeholder="17325" Clearable="true"
                                  @bind-Value="_selectedTrainNumber"></MudTextField>
                </MudTabPanel>
                <MudTabPanel Text="Linie">
                    <MudSelect T="LinienProto" @bind-Value="_selectedLinie" Label="Linie">
                        @foreach (var item in _linien)
                        {
                            <MudSelectItem Value="item">
                                @(GetTyp((LinienTyp)item.Typ)) - @item.Nummer von @(_betriebspunkte.Single(x => ((Guid)x.Id).Equals(item.VonBetriebspunktId)).Name) bis @(_betriebspunkte.Single(x => ((Guid)x.Id).Equals(item.BisBetriebspunktId)).Name)
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudTabPanel>
                <MudTabPanel Text="Strecken">
                    @foreach (var entry in _fahrenStreckenEntries)
                    {
                        <FahrenStreckenEntry Strecken="_strecken" Model="entry"/>
                        @if (!string.IsNullOrEmpty(entry.ErrorMessage))
                        {
                            <MudAlert Severity="Severity.Error">@entry.ErrorMessage</MudAlert>
                        }
                    }
                    <MudButton OnClick="AddEntry">
                        <MudText Typo="Typo.subtitle1" Color="Color.Primary">+ Eintrag hinzufügen</MudText>
                    </MudButton>
                </MudTabPanel>
            </MudTabs>
            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <MudAlert Severity="Severity.Error">Folgende Fehler sind aufgetreten: @_errorMessage</MudAlert>
            }
        </MudCardContent>
        <MudCardActions>
            <MudButton OnClick="Submit" Color="Color.Primary">Laden</MudButton>
            <MudButton OnClick="Cancel" Color="Color.Secondary">Schliessen</MudButton>
        </MudCardActions>
    </MudCard>
</MudItem>


@code {

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = null!;

    private List<StreckenProto> _strecken = new List<StreckenProto>();
    private List<BetriebspunktProto> _betriebspunkte = new List<BetriebspunktProto>();
    private List<LinienProto> _linien = new List<LinienProto>();
    private List<FahrenStreckenEntryModel> _fahrenStreckenEntries = new List<FahrenStreckenEntryModel>();
    private int _currentActiveIndex = 0;
    private LinienProto? _selectedLinie;
    private int? _selectedTrainNumber = null;

    private string? _errorMessage;

    protected async override Task OnInitializedAsync()
    {
        _strecken = (await StreckenService.ListAllStreckenAsync(new Empty())).Strecken.ToList();
        _linien = (await LinienService.GetAllLinienAsync(new Empty())).Linien.ToList();
        _betriebspunkte = (await BetriebspunkteService.ListAllBetriebspunkteAsync(new Empty())).Betriebspunkte.ToList();
    }

    private string GetTyp(LinienTyp typ)
    {
        switch (typ)
        {
            case LinienTyp.SBahn:
                return "S-Bahn";
            case LinienTyp.RegioExpress:
                return "RE";
            case LinienTyp.InterRegio:
                return "IR";
            case LinienTyp.InterCity:
                return "IC";
            case LinienTyp.EuroCity:
                return "EC";
            case LinienTyp.NightJet:
                return "NJ";
            case LinienTyp.ICE:
                return "ICE";
            case LinienTyp.TGV:
                return "TGV";
            default:
                return string.Empty;
        }
    }

    private void AddEntry()
    {
        _fahrenStreckenEntries.Add(new FahrenStreckenEntryModel());
    }

    private async Task Submit()
    {
        if (!Validate())
        {
            return;
        }

        List<IBaseEntry> entries;
        if (_currentActiveIndex == 0)
        {
            entries = await RequestEntriesByTrainNumber();
        }
        else if (_currentActiveIndex == 1)
        {
            entries = await RequestEntriesByLinie();
        }
        else
        {
            entries = await RequestEntriesByStrecken();
        }

        entries.Reverse();

        MudDialog.Close(entries);
    }

    private async Task<List<IBaseEntry>> RequestEntriesByLinie()
    {
        List<FahrenRequestStrecke> requestStrecken = new List<FahrenRequestStrecke>();

        var response = await FahrenService.FahrenByLinieAsync(new FahrenRequestByLinie()
        {
            LinieId = _selectedLinie!.Id
        });

        return Mapper.Map<List<IBaseEntry>>(response.Entries);
    }

    private async Task<List<IBaseEntry>> RequestEntriesByStrecken()
    {
        List<FahrenRequestStrecke> requestStrecken = new List<FahrenRequestStrecke>();

        foreach (var entry in _fahrenStreckenEntries)
        {
            requestStrecken.Add(new FahrenRequestStrecke()
            {
                StreckenKonfigurationId = entry.SelectedKonfiguration!.Id, VonBetriebspunktId = entry.VonBetriebspunkt!.Id, BisBetriebspunktId = entry.BisBetriebspunkt!.Id,
            });
        }


        FahrenRequestByStrecken requestByStrecken = new FahrenRequestByStrecken()
        {
            VonBetriebspunkt = _fahrenStreckenEntries.First().VonBetriebspunkt!.Id, BisBetriebspunktId = _fahrenStreckenEntries.Last().VonBetriebspunkt!.Id,
        };
        requestByStrecken.Strecken.Add(requestStrecken);

        var response = await FahrenService.FahrenByStreckenAsync(requestByStrecken);

        return Mapper.Map<List<IBaseEntry>>(response.Entries);
    }

    private async Task<List<IBaseEntry>> RequestEntriesByTrainNumber()
    {
        var trainNumberLinked = await LinienService.GetTrainNumberLinkedAsync(new GetTrainNumberLinkRequest()
        {
            TrainNumber = _selectedTrainNumber!.Value
        });


        var dialogParameters = new DialogParameters<ApproveTrainNumberLink>()
        {
            {
                x => x.TrainNumberLink, trainNumberLinked
            },
            {
                x => x.TrainNumber, _selectedTrainNumber.Value
            }
        };

        var result = await DialogService.Show<ApproveTrainNumberLink>("Zugnummer", dialogParameters).Result;

        var linieTrainId = result.Data as GuidProto;
        FahrenRequestByTrainNumber requestByTrainNumber = new FahrenRequestByTrainNumber()
        {
            LinieTrainId = linieTrainId
        };

        var response = await FahrenService.FahrenByTrainNumberAsync(requestByTrainNumber);

        return Mapper.Map<List<IBaseEntry>>(response.Entries);
    }

    private bool Validate()
    {
        StringBuilder builder = new();
        if (_currentActiveIndex == 0)
        {
            ValidateTrainNumber(builder);
        }
        else if (_currentActiveIndex == 1)
        {
         
            ValidateLinie(builder);   
        }
        else
        {
            ValidateStrecken(builder);
        }

        _errorMessage = builder.ToString();

        return string.IsNullOrEmpty(_errorMessage);
    }

    private void ValidateStrecken(StringBuilder builder)
    {
        if (!_fahrenStreckenEntries.Any())
        {
            builder.AppendLine("Es wurde keine Strecken hinzugefügt");

            return;
        }

        if (_fahrenStreckenEntries.Any(x => !string.IsNullOrEmpty(x.ErrorMessage)))
        {
            builder.AppendLine("Es gibt Fehler!");

            return;
        }

        int currentIndex = 0;
        while (currentIndex + 1 < _fahrenStreckenEntries.Count)
        {
            var currentEntry = _fahrenStreckenEntries.ElementAt(currentIndex);
            var newEntry = _fahrenStreckenEntries.ElementAt(currentIndex + 1);

            if (!((Guid)currentEntry.BisBetriebspunkt!.Id).Equals(newEntry.VonBetriebspunkt!.Id))
            {
                builder.AppendLine(string.Format("Nach der Strecke {0} stimmt der Übergang nicht, {1} ist nicht {2}", currentEntry.SelectedStrecke?.Nummer, currentEntry.BisBetriebspunkt.Name, newEntry.VonBetriebspunkt.Name));
            }

            currentIndex++;
        }
    }

    private void ValidateLinie(StringBuilder builder)
    {
        if (_selectedLinie is not null)
        {
            return;
        }

        builder.AppendLine("Es wurde keine Linie ausgewählt!");
    }

    private void ValidateTrainNumber(StringBuilder builder)
    {
        if (_selectedTrainNumber.HasValue)
        {
            return;
        }

        builder.AppendLine("Es wurde kein Zugnummer eingegeben!");
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

}
