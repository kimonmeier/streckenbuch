@using Streckenbuch.Client.Services
@inject SettingsProvider SettingsProvider

<MudStack Class="p-5">
    <MudCheckBox T="bool" ValueChanged="IsVoiceActivatedChanged" Value="SettingsProvider.IsVoiceActivated" Label="Stimme aktivieren?" />
    <MudCheckBox T="bool" ValueChanged="DarkModeChanged" Value="SettingsProvider.IsDarkMode" Label="Dark Mode?"></MudCheckBox>
    <MudTextField T="int" ValueChanged="TrainDriverNumberChanged" Value="SettingsProvider.TrainDriverNumber" Label="Lokführer-ID"></MudTextField>
    <MudSelect T="RecordingOption" ValueChanged="RecordingChanged" Value="SettingsProvider.IsRecordingActive" Label="Position aufnehmen?">
        <MudSelectItem Value="RecordingOption.None">Nicht aufnehmen</MudSelectItem>
        <MudSelectItem Value="RecordingOption.Manual">Manuell aufnehmen</MudSelectItem>
        <MudSelectItem Value="RecordingOption.Auto">Automatisch aufnehmen</MudSelectItem>
    </MudSelect>

    <MudButton OnClick="Close">Close</MudButton>
</MudStack>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = null!;
    
    private void IsVoiceActivatedChanged(bool obj)
    {
        SettingsProvider.IsVoiceActivated = obj;
        SettingsProvider.SaveAsync().ConfigureAwait(false);
    }

    private void DarkModeChanged(bool obj)
    {
        SettingsProvider.IsDarkMode = obj;
        SettingsProvider.SaveAsync().ConfigureAwait(false);
    }
    
    private void RecordingChanged(RecordingOption option)
    {
        SettingsProvider.IsRecordingActive = option;
        SettingsProvider.SaveAsync().ConfigureAwait(false);
    }

    private void TrainDriverNumberChanged(int obj)
    {
        SettingsProvider.TrainDriverNumber = obj;
        SettingsProvider.SaveAsync().ConfigureAwait(false);
    }

    private void Close()
    {
        MudDialog.Close();
    }
}