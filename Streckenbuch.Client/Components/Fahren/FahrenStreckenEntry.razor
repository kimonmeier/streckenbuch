@inject BetriebspunkteService.BetriebspunkteServiceClient betriebspunktService

<div class="flex flex-col">
    <div class="flex flex-row">
        <MudAutocomplete SearchFunc="SearchStrecken" T="StreckenProto" ResetValueOnEmptyText="true" Value="Model.SelectedStrecke" ToStringFunc="@((target) => target.Nummer.ToString())" ValueChanged="OnStreckeChanged" Label="Strecke"></MudAutocomplete>
        <MudAutocomplete SearchFunc="SearchStreckenKonfiguration" T="StreckenKonfigurationProto" Value="Model.SelectedKonfiguration" ShowProgressIndicator="_streckenKonfigurationen == null" ValueChanged="OnKonfigurationChanged" ToStringFunc="@((target) => target.Name)" Label="Konfiguration"></MudAutocomplete>
    </div>
    <MudAutocomplete SearchFunc="SearchBetriebspunkte" T="BetriebspunktProto" Label="Von Betriebspunkt" Value="Model.VonBetriebspunkt" ToStringFunc="@((target) => target.Name)" ValueChanged="VonBetriebspuntChanged" />
    <MudAutocomplete SearchFunc="SearchBetriebspunkte" T="BetriebspunktProto" Label="Bis Betriebspunkt" Value="Model.BisBetriebspunkt" ToStringFunc="@((target) => target.Name)" ValueChanged="BisBetriebspuntChanged" />
</div>

@code {

    [Parameter]
    public List<StreckenProto> Strecken { get; set; } = new();

    [Parameter]
    public FahrenStreckenEntryModel Model { get; set; } = null!;

    private List<StreckenKonfigurationProto> _streckenKonfigurationen = null!;
    private List<BetriebspunktProto> _betriebspunkte = null!;

    private void OnStreckeChanged(StreckenProto streckenProto)
    {
        Model.SelectedStrecke = streckenProto;
        _streckenKonfigurationen = streckenProto.Konfigurationen.ToList();
        Model.SelectedKonfiguration = null;
        _betriebspunkte = null;
        Model.VonBetriebspunkt = null;
        Model.BisBetriebspunkt = null;
    }

    private async Task OnKonfigurationChanged(StreckenKonfigurationProto streckenKonfigurationProto)
    {
        Model.SelectedKonfiguration = streckenKonfigurationProto;
        _betriebspunkte = (await betriebspunktService.ListBetriebspunkteByStreckenKonfigurationAsync(new ListBetriebspunkteByStreckenKonfigurationRequest()
            {
                StreckenKonfigurationId = streckenKonfigurationProto.Id
            })).Betriebspunkte.ToList();

        Model.VonBetriebspunkt = _betriebspunkte.First();
        Model.BisBetriebspunkt = _betriebspunkte.Last();
    }

    private void VonBetriebspuntChanged(BetriebspunktProto betriebspunktProto)
    {
        if (!Validate(betriebspunktProto, Model.BisBetriebspunkt))
        {
            return;
        }
        Model.VonBetriebspunkt = betriebspunktProto;
    }

    private void BisBetriebspuntChanged(BetriebspunktProto betriebspunktProto)
    {
        if (!Validate(Model.VonBetriebspunkt, betriebspunktProto))
        {
            return;
        }
        Model.BisBetriebspunkt = betriebspunktProto;
    }

    private bool Validate(BetriebspunktProto? vonBetriebspunkt, BetriebspunktProto? bisBetriebspunkt)
    {
        if (vonBetriebspunkt is null || bisBetriebspunkt is null)
        {
            Model.ErrorMessage = string.Empty;
            return true;
        }

        if (_betriebspunkte is null)
        {
            throw new Exception("Something went wrong");
        }

        if (_betriebspunkte.IndexOf(vonBetriebspunkt) < _betriebspunkte.IndexOf(bisBetriebspunkt))
        {
            Model.ErrorMessage = string.Empty;
            return true;
        }

        Model.ErrorMessage = "Die Anordnunge der Betriebspunkte ergibt kein Sinn";
        return false;
    }

    private async Task<IEnumerable<StreckenProto>> SearchStrecken(string value, CancellationToken token)
    {
        await Task.CompletedTask;
        if (string.IsNullOrEmpty(value))
        {
            return Strecken;
        }

        return Strecken.Where(x => x.Nummer.ToString().Contains(value));
    }

    private async Task<IEnumerable<StreckenKonfigurationProto>> SearchStreckenKonfiguration(string value, CancellationToken token)
    {
        await Task.CompletedTask;
        if (string.IsNullOrEmpty(value))
        {
            return _streckenKonfigurationen;
        }

        return _streckenKonfigurationen.Where(x => x.Name.ToLower().Contains(value.ToLower()));
    }

    private async Task<IEnumerable<BetriebspunktProto>> SearchBetriebspunkte(string value, CancellationToken token)
    {
        await Task.CompletedTask;
        if (string.IsNullOrEmpty(value))
        {
            return _betriebspunkte;
        }

        return _betriebspunkte.Where(x => x.Name.ToLowerInvariant().Contains(value.ToLowerInvariant(), StringComparison.InvariantCultureIgnoreCase));
    }
}
