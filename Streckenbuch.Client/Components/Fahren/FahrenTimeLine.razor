@using Streckenbuch.Client.Models.Fahren
@using Streckenbuch.Client.Services

@implements IDisposable
@inject IGeolocationService geolocationService
@inject FahrenPositionService fahrenPositionService


@if (!_displayedEntries.Any())
{
    <MudAlert Severity="Severity.Warning">Sie sind am Ziel angekommen, bitte einen neuen Fahrplan laden!</MudAlert>
}
else
{
    <div class="flex h-full w-full items-end justify-end overflow-hidden">
        <MudButton OnClick="() => fahrenPositionService.SkipPosition()">Skip</MudButton>
        <MudTimeline Class="w-full" TimelineOrientation="TimelineOrientation.Vertical"
                     TimelinePosition="TimelinePosition.Alternate">
            @foreach (var entry in _displayedEntries)
            {
                <div class="h-[100px] w-full @(_hasToMoveDown ? "slide-bottom" : string.Empty)">
                    <FahrenTimeLineEntry OnClickAction="OnEntryClick" Entry="entry"/>
                </div>
            }
        </MudTimeline>
    </div>
}

@code {

    [Parameter]
    public List<IBaseEntry>? FahrplanEntries { get; set; }

    private List<IBaseEntry> _displayedEntries = new();
    private bool _hasToMoveDown = false;
    private double? _watchTaskId;

    protected async override Task OnInitializedAsync()
    {
        _watchTaskId = await geolocationService.WatchPositionAsync(UpdatePosition,
            (error) =>
            {
                Console.WriteLine("Error occured during watch position {0}", error.Message);
            },
            new PositionOptions()
            {
                EnableHighAccuracy = true, MaximumAge = TimeSpan.Zero.TotalMilliseconds, Timeout = TimeSpan.FromSeconds(10).TotalMilliseconds
            }
        );

        fahrenPositionService.DataChanged += (sender, args) => this.InvokeAsync(StateHasChanged);
    }

    protected override void OnParametersSet()
    {
        if (FahrplanEntries is null || !FahrplanEntries.Any())
        {
            return;
        }

        _displayedEntries = fahrenPositionService.Initialize(FahrplanEntries, MoveDown);
    }

    private void OnEntryClick(IBaseEntry entry)
    {
        Console.WriteLine("TODO!");
    }

    private void MoveDown(Action executeAfterUpdate)
    {
        if (_hasToMoveDown)
        {
            return;
        }
        
        // Add Transition before
        _hasToMoveDown = true;

        InvokeAsync(StateHasChanged);
        
        Task.Run(async () =>
        {
            await Task.Delay(TimeSpan.FromSeconds(2.1));

            executeAfterUpdate();
            _hasToMoveDown = false;
            
            await InvokeAsync(StateHasChanged);
        });
    }

    private void UpdatePosition(GeolocationPosition position)
    {
        if (FahrplanEntries is null || !FahrplanEntries.Any())
        {
            return;
        }

        fahrenPositionService.UpdatePosition(position).ConfigureAwait(false);
    }

    public void Dispose()
    {
        if (_watchTaskId is not null)
        {
            geolocationService.ClearWatchAsync(_watchTaskId.Value).ConfigureAwait(false);
        }
    }

}

