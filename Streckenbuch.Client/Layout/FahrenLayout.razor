@using Blazored.LocalStorage
@using Streckenbuch.Client.States
@inherits LayoutComponentBase
@inject NavigationManager NavManager
@inject FahrenService.FahrenServiceClient FahrenService
@inject ContinuousConnectionState ContinuousConnectionState
@inject ISyncLocalStorageService LocalStorage
@implements IDisposable

<MudThemeProvider @ref="@_mudThemeProvider"
                  Theme="@_baseTheme"
                  @bind-IsDarkMode="@_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<HeadContent>
    <style>
        .slide-bottom {
            -webkit-animation: slide-bottom 2s forwards cubic-bezier(0.190, 1.000, 0.220, 1.000);
            animation: slide-bottom 2s forwards cubic-bezier(0.190, 1.000, 0.220, 1.000);
        }

        @@keyframes slide-bottom {
          0% {
            -webkit-transform: translateY(0);
                    transform: translateY(0);
          }
          100% {
            -webkit-transform: translateY(100px);
                transform: translateY(100px);
          }
        }

    </style>
    <link href="manifest.webmanifest" rel="manifest" />
</HeadContent>

<MudLayout>
    <MudAppBar>
        <MudGrid Justify="Justify.SpaceEvenly">
            <MudItem>
                <MudButton OnClick="DarkModeChanged">
                    <MudIcon Icon="@Icons.Material.Outlined.DarkMode"></MudIcon>
                </MudButton>
                <MudButton OnClick="@(() => NavManager.NavigateTo("/"))">
                    <MudIcon Icon="@Icons.Material.Outlined.Backpack"></MudIcon>
                </MudButton>
                <MudButton OnClick="@(() => SelectRoute?.Invoke(this, EventArgs.Empty))">
                    <MudIcon Icon="@Icons.Material.Outlined.Download"></MudIcon>
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudAppBar>
    <MudMainContent Class="w-full h-full">
        <CascadingValue Value="this">
            @Body
        </CascadingValue>
    </MudMainContent>
</MudLayout>

@code {
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider = null!;
    private readonly CancellationTokenSource _cancellationToken = new CancellationTokenSource();
    
    public event EventHandler? SelectRoute;

    private readonly MudTheme _baseTheme = new MudTheme()
        {
            LayoutProperties = new LayoutProperties()
            {
                DefaultBorderRadius = ".4rem"
            },
        };

    protected override void OnInitialized()
    {
        _isDarkMode = LocalStorage.GetItem<bool>("Layout.DarkMode");
        ContinuousConnectionState.StartBackgroundTask(_cancellationToken.Token);
    }


    public void Dispose()
    {
        _cancellationToken.Cancel();
    }

    private void DarkModeChanged()
    {
        _isDarkMode = !_isDarkMode;
        
        LocalStorage.SetItem("Layout.DarkMode", _isDarkMode);
    }

}