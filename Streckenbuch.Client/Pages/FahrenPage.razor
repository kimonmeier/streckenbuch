@page "/fahren"
@using blazejewicz.Blazor.BeforeUnload
@using Streckenbuch.Client.Components.Fahren
@using Streckenbuch.Client.Services
@using Streckenbuch.Client.States
@inject IDialogService DialogService
@inject ScreenWakeLockService ScreenWakeLockService
@inject ContinuousConnectionState ConnectionState
@inject BeforeUnload BeforeUnload
@inject AudioState AudioState
@layout FahrenLayout
@implements IDisposable

<PageTitle>Fahren</PageTitle>

<FahrenTimeLine FahrplanEntries="_list"></FahrenTimeLine>

@code {
    [CascadingParameter]
    public FahrenLayout Layout { get; set; } = null!;

    private List<IBaseEntry> _list = new List<IBaseEntry>();
    private WakeLockSentinel? _lockSentinel = null;

    protected async override Task OnInitializedAsync()
    {
        BeforeUnload.BeforeUnloadHandler += BeforeUnloadOnBeforeUnloadHandler;
        
        Layout.SelectRoute += SelectRoute;
        Layout.OpenSettings += LayoutOnOpenSettings;
        Layout.RecordPositions += LayoutOnRecordPositions;
        
        await AudioState.SayText("Audio-System initialisiert!");
    }

    private void LayoutOnRecordPositions(object? sender, EventArgs e)
    {
        DialogService.Show<StartRecordingDialog>();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        _lockSentinel ??= await ScreenWakeLockService.RequestWakeLockAsync();
    }

    private void LayoutOnOpenSettings(object? sender, EventArgs e)
    {
        DialogService.Show<SettingsDialog>();
    }

    private void BeforeUnloadOnBeforeUnloadHandler(object? sender, BeforeUnloadArgs e)
    {
        Layout.SelectRoute -= SelectRoute;

        if (_lockSentinel is not null)
        {
            ScreenWakeLockService.ReleaseWakeLockAsync(_lockSentinel).ConfigureAwait(false);
        }
    }

    private void SelectRoute(object? source, EventArgs eventArgs)
    {
        Task.Run(async () =>
        {
            var dialog = await DialogService.ShowAsync<LoadFahrordnung>();
            var result = await dialog.Result;

            if (result?.Data is not List<IBaseEntry> list)
            {
                throw new ArgumentException("Something is wrong");
            }

            _list = list;
            await InvokeAsync(StateHasChanged);
        });
    }
    
    public void Dispose()
    {        
        BeforeUnload.BeforeUnloadHandler -= BeforeUnloadOnBeforeUnloadHandler;

        BeforeUnloadOnBeforeUnloadHandler(null, null!);
        ConnectionState.UnregisterTrain().ConfigureAwait(false);
    }
}
