@page "/fahren"
@using Streckenbuch.Client.Components.Fahren
@using Streckenbuch.Client.Services
@using Streckenbuch.Client.States
@inject FahrenService.FahrenServiceClient FahrenService
@inject IDialogService DialogService
@inject ScreenWakeLockService ScreenWakeLockService
@layout FahrenLayout
@implements IDisposable

<PageTitle>Fahren</PageTitle>

<FahrenTimeLine FahrplanEntries="_list"></FahrenTimeLine>

@code {
    [CascadingParameter]
    public FahrenLayout Layout { get; set; } = null!;

    private List<IBaseEntry> _list = new List<IBaseEntry>();
    private WakeLockSentinel? _lockSentinel = null;

    protected async override Task OnInitializedAsync()
    {
        Layout.SelectRoute += SelectRoute;

        _lockSentinel = await ScreenWakeLockService.RequestWakeLockAsync();
    }

    private void SelectRoute(object? source, EventArgs eventArgs)
    {
        Task.Run(async () =>
        {
            var dialog = DialogService.Show<LoadFahrordnung>();
            var result = await dialog.Result;

            if (result?.Data is not List<IBaseEntry> list)
            {
                throw new ArgumentException("Something is wrong");
            }

            _list = list;
            await InvokeAsync(StateHasChanged);
        });
    }
    
    public void Dispose()
    {
        Layout.SelectRoute -= SelectRoute;

        if (_lockSentinel is not null)
        {
            ScreenWakeLockService.ReleaseWakeLockAsync(_lockSentinel).ConfigureAwait(false);
        }
    }
}
