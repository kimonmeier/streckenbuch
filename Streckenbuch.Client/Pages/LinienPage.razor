@attribute [Authorize(Roles = Permissions.Admin)]
@page "/linien"

@inject LinienService.LinienServiceClient LinienService
@inject BetriebspunkteService.BetriebspunkteServiceClient BetriebspunkteService
@inject IDialogService DialogService

<PageTitle>Linien</PageTitle>

<MudTable Items="Linien" Loading="_isLoading" Class="w-full">
    <HeaderContent>
        <MudTh>Kategorie</MudTh>
        <MudTh>Nummer</MudTh>
        <MudTh>Von</MudTh>
        <MudTh>Bis</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@GetTypText(context.Typ)</MudTd>
        <MudTd>@context.Nummer</MudTd>
        <MudTd>@Betriebspunkte.Single(x => ((Guid)x.Id).Equals((Guid)context.VonBetriebspunktId)).Name</MudTd>
        <MudTd>@Betriebspunkte.Single(x => ((Guid)x.Id).Equals((Guid)context.BisBetriebspunktId)).Name</MudTd>
        <MudTd>
            <MudButtonGroup Variant="Variant.Filled">
                <MudButton Color="Color.Primary" OnClick="@(() => EditStrecken(context))">
                    Strecken anschauen
                </MudButton>
                <MudButton Color="Color.Secondary" OnClick="@(() => EditLinie(context))">
                    Linie editieren
                </MudButton>
                <MudButton Color="Color.Error" OnClick="@(() => DeleteLinie(context))">
                    Linie löschen
                </MudButton>
            </MudButtonGroup>
        </MudTd>
    </RowTemplate>
</MudTable>

<MudButtonGroup>
    <MudButton Color="@Color.Primary" OnClick="CreateLinie">Linie erstellen</MudButton>
</MudButtonGroup>

@code {
    private List<LinienProto> Linien { get; set; }
    private List<BetriebspunktProto> Betriebspunkte { get; set; }
    private bool _isLoading = false;
    protected async override Task OnInitializedAsync()
    {
        _isLoading = true;
        
        Betriebspunkte = (await BetriebspunkteService.ListAllBetriebspunkteAsync(new Empty())).Betriebspunkte.ToList();

        await LoadData();
    }

    private async Task LoadData()
    {
        _isLoading = true;
        var list = await LinienService.GetAllLinienAsync(new Empty());

        Linien = list.Linien.ToList();

        _isLoading = false;
    }

    private async Task EditStrecken(LinienProto proto)
    {
        var param = new DialogParameters<EditLinienStrecken>()
        {
            { x => x.Linie, proto },
        };
        await DialogService.Show<EditLinienStrecken>("Strecken zuordnen", param).Result;

        await LoadData();
    }

    private async Task CreateLinie()
    {
        await DialogService.Show<CreateOrEditLinie>().Result;

        await LoadData();
    }
    
    private async Task EditLinie(LinienProto linienProto)
    {
        var parameters = new DialogParameters<CreateOrEditLinie>()
        {
            {
                x => x.LinieToEdit, linienProto
            }
        };
        
        await DialogService.Show<CreateOrEditLinie>("Linie bearbeiten", parameters).Result;

        await LoadData();
    }

    private async Task DeleteLinie(LinienProto linienProto)
    {
        await LinienService.DeleteLinieAsync(new DeleteLinieRequest()
        {
            LinieId = linienProto.Id
        });
        
        await LoadData();
    }

    private string GetTypText(int typNummer) {
        LinienTyp typ = (LinienTyp)typNummer;

        return typ switch
        {
            LinienTyp.SBahn => "S-Bahn",
            LinienTyp.RegioExpress => "RE",
            LinienTyp.InterRegio => "IR",
            LinienTyp.InterCity => "IC",
            LinienTyp.EuroCity => "EC",
            LinienTyp.NightJet => "NJ",
            LinienTyp.ICE => "ICE",
            LinienTyp.TGV => "TGV",
            _ => throw new ArgumentOutOfRangeException()
        };
    }
}
