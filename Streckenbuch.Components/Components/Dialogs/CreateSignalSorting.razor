
@inject SignaleService.SignaleServiceClient SignalService

<EditForm Model="@Model" OnValidSubmit="Submit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem>
            <MudCard>
                <MudCardContent>
                    <MudDatePicker @bind-Date="Model.GueltigAb" For="@(() => Model.GueltigAb)" Required="true" Label="Von" />
                    <MudDatePicker @bind-Date="Model.GueltigBis" For="@(() => Model.GueltigAb)" Clearable="true" Label="Bis"/>
                    <MudCheckBox @bind-Value="Model.CopyPreviousConfiguration" For="@(() => Model.CopyPreviousConfiguration)" Label="Vorherige Sortierung kopieren?" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Create</MudButton>
                    <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" OnClick="Cancel">Cancel</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private class CreateSignalModel
    {
        [Required]
        public DateTime? GueltigAb { get; set; }    
        
        public DateTime? GueltigBis { get; set; }    
        
        [Required]
        public bool CopyPreviousConfiguration { get; set; }
    }

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = null!;
    
    [Parameter]
    public Guid StreckenkonfigurationId { get; set; }
    
    private CreateSignalModel Model { get; set; } = new CreateSignalModel();

    private async Task Submit()
    {
        await SignalService.CreateSignalSortingAsync(new CreateSignalSortingRequest()
        {
            StreckenKonfigurationId = StreckenkonfigurationId, VonDatum = Model.GueltigAb, BisDatum = Model.GueltigBis, CopyPreviousSorting = Model.CopyPreviousConfiguration
        });

        MudDialog.Close();
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}